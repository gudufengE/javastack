server.port = 8280
spring.application.name = zuulserver
eureka.client.service-url.defaultZone = http://localhost:8260/eureka
eureka.instance.prefer-ip-address = true
eureka.instance.ip-address = 192.168.2.103
eureka.client.register-with-eureka = true
eureka.client.fetch-registry = true
logging.level.org.springframework = INFO

#dashbooard和web端点
hystrix.dashboard.proxy-stream-allow-list = **
management.endpoint.hystrix.stream.enabled = true
management.endpoints.web.exposure.include = *
#默认情况下，zuul集成了Hystrix，
# 但是zuul的Hystrix隔离策略默认是信号量而不是线程池（有别于单独使用Hystrix，单独使用时是线程池），
# 这里改成线程池
#否则，在dashboard中Threadpool面板一直是loading
#设置Hystrix隔离策略为线程池
zuul.ribbon-isolation-strategy=thread
#默认情况下，zuul的隔离策略会作用于所有路由
#每个路由使用独立的线程池
zuul.thread-pool.use-separate-thread-pools=true



#路由规则
#注册到eureka服务器的服务--useservice
zuul.routes.userservice-routname.path = /user/**
zuul.routes.userservice-routname.service-id = userservice
#或
#zuul.routes.userservice=/user/**

#外部服务路由配置--这里实现了服务转发
zuul.routes.baidu-routename.url = http://www.baidu.com
zuul.routes.baidu-routename.path = /baidu/**
#zuul.routes.baidu-routename.service-id = baiduservice

#ribbon.eureka.enabled=true
#zuul.ribbon.eager-load.enabled=true

#本地跳转，意义不大
zuul.routes.api-b.path=/api-b/**
#需要在zuul服务器上增加一个/local/hello的接口实现才能让 api-b 路由规则生效
zuul.routes.api-b.url=forward:/local
#测试：http://localhost:8280/api-b/hello



#设置路由前缀
#zuul.prefix=/api

#配置敏感头
#zuul.routes.userservice-routname.custom-sensitive-headers=true
#zuul.routes.userservice-routname.sensitive-headers = Cookie,Set-Cookie,Authorization,Pragma,Cache-Control,Expires,X-Frame-Options
#全局配置敏感头
#zuul.sensitive-headers=*
#忽略一些敏感头
#zuul.ignored-headers=Cookie,Set-Cookie,Authorization

#忽略服务，防入侵
#忽略所有
#zuul.ignored-services=*
#忽略具体一个：userservice，多个用,分割
#zuul.ignored-services=userservice

#不停zuul服务器，动态修改路由：需配合config子项目，然后在zuul服务器中使用/refresh端点重新加载配置


#filter=================================================
zuul.host.socket-timeout-millis





