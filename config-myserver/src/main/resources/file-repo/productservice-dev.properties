project.version = 1.0-SNAPSHOT

server.port = 2200
spring.application.name = productservice
#将IP注册到Eureka Server上，如果不配置就是机器的主机名
##服务在注册的时候使用ip地址
eureka.instance.prefer-ip-address = true
eureka.instance.ip-address = 192.168.2.103
eureka.client.register-with-eureka = true
eureka.client.fetch-registry = true
eureka.client.service-url.defaultZone=http://localhost:8260/eureka
#eureka.client.service-url.defaultZone=http://admin:123456@localhost:8260/eureka
#eureka.client.service-url.defaultZone = http://admin:123456@sdpeer2:8262/eureka
#logging.level.org.springframework = DEBUG
logging.level.org.springframework.web.servlet.DispatcherServlet = DEBUG
#====================================================================================

#feign的hystrix功能默认是关闭的，这里打开
feign.hystrix.enabled=true

#dashbouard和web断点
hystrix.dashboard.proxy-stream-allow-list = **
management.endpoint.hystrix.stream.enabled = true
management.endpoints.web.exposure.include = *

#feignclient参数配置
feign.client.default-config=my-config
feign.client.config.my-config.error-decoder=com.javastack.productservice.product.service.exception.MyErrorDecoder

#熔断器打开配置
#超时--针对接口
#hystrix.command.UserService#load(Long)).execution.isolation.thread.timeoutInMilliseconds = 300000
#hystrix.command.UserService#findAll().execution.isolation.thread.timeoutInMilliseconds = 30000
#超时--default--全局
#hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds = 5000

#超时--针对@HystrixCommand中的commandKey
hystrix.command.ProductEndpoint_detail.execution.isolation.thread.timeoutInMilliseconds = 5000

#指到zipkin的服务端，以便zipkin服务端能收集到日志
#zipkin配置开始
spring.zipkin.base-url=http://localhost:9000
spring.sleuth.sampler.percentage=1.0
#zipkin配置结束



################redis整合 start################
spring.redis.client-name=lettuce-client
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=192.168.91.128
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=
# 连接池中的最小空闲连接
spring.redis.lettuce.pool.min-idle=0
# 连接池中的最大空闲连接
spring.redis.lettuce.pool.max-idle=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.lettuce.pool.max-wait=-1
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.lettuce.pool.max-active=20
################redis整合 end################

################kafka整合 start################
#
#spring.cloud.stream.bindings.input.destination=cloud-usertopic
#spring.cloud.stream.bindings.input.content-type=application/json
#spring.cloud.stream.bindings.input.group=productGroup
spring.cloud.stream.bindings.inboundUserMsg.destination=cloud-usertopic
spring.cloud.stream.bindings.inboundUserMsg.content-type=application/json
#在多实例不是的商品服务中，分组名要这种一样，这样只要其中的一个监听，然后处理 用户的变更就可以了
spring.cloud.stream.bindings.inboundUserMsg.group=productGroup
spring.cloud.stream.kafka.binder.brokers=192.168.91.128
spring.cloud.stream.kafka.binder.defaultBrokerPort=9092
spring.cloud.stream.kafka.binder.zkNodes=192.168.91.128

################kafka整合 end################
# Swagger
swagger.host = localhost
swagger.title = productservice api
swagger.description = 产品微服务
swagger.author = pc
# =====================================================================================================================
# == JPA (Hibernate)                                                                                                 ==
# =====================================================================================================================
spring.jpa.open-in-view = true
spring.jpa.hibernate.ddl-auto = none
spring.jpa.show-sql = false
spring.jpa.properties.hibernate.physical_naming_strategy = com.javastack.productservice.product.util.HibernatePhysicalNamingNamingStrategy
# =====================================================================================================================
# == H2 Datasource Properties                                                                                        ==
# =====================================================================================================================
spring.jpa.database = H2
spring.datasource.driverClassName = org.h2.Driver
spring.datasource.url = jdbc\:h2\:mem\:testdb;DB_CLOSE_DELAY=-1;
spring.datasource.username = sa
spring.datasource.password =

myfoo = I am productservice dev value from native